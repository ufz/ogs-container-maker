stages:
  - build
  - release
  - deploy

variables:
  PIP_CACHE_DIR: "$CI_PROJECT_DIR/.cache/pip"
  BUILDKIT_PROGRESS: "plain"
  CPU_TARGET: ivybridge
  OGSCM_ARGUMENTS:
    value: "compiler.py ogs.py --ogs ogs/ogs@master --cmake_args ' -DOGS_CPU_ARCHITECTURE=OFF -DBUILD_TESTING=OFF'"
    description: "Arguments to ogscm. -B -C -R --ccache are always passed automatically. For more args see README.md!"

dev images:
  tags: ['envinf2-shell']
  stage: build
  rules:
    - if: $CI_COMMIT_TAG
      when: never
    - if: $CI_PIPELINE_SOURCE == "web"
      when: never
    - if: $CI_COMMIT_BRANCH == "main"
  script:
    - black --check ogscm
    - poetry install
    - poetry run ogscm compiler.py ogs.py -B --ogs off --cpu-target $CPU_TARGET
    - poetry run ogscm compiler.py ogs.py -B --base_image centos:8 --ogs off --cpu-target $CPU_TARGET

release:
  stage: release
  image: registry.gitlab.com/gitlab-org/release-cli:latest
  rules:
    - if: $CI_COMMIT_TAG
  script:
    - echo 'Running release job.'
  release:
    tag_name: '$CI_COMMIT_TAG'
    description: 'Created using the GitLab release-cli.'

publish:
  tags: ['shell']
  stage: deploy
  rules:
    - if: $CI_COMMIT_TAG
  script:
    - poetry install
    - poetry build
    - poetry publish -u $PYPI_USERNAME -p $PYPI_PASSWORD

manual build:
  tags: ['envinf2-shell']
  stage: build
  rules:
    - if: $CI_PIPELINE_SOURCE != "web"
      when: never
    - if: $CI_COMMIT_BRANCH
  script:
    - poetry install
    - eval poetry run ogscm -B -C -R --ccache --cpu-target $CPU_TARGET $OGSCM_ARGUMENTS
  artifacts:
    paths:
      - _out/images/*.sif
  cache:
    paths:
      - .venv
